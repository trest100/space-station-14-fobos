using System.Numerics;
using Content.Shared.Paper;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Paper.UI;

[GenerateTypedNameReferences]
public sealed partial class StampWidget : PanelContainer
{
    private readonly IResourceCache _resCache;
    private StyleBoxTexture _borderTexture;
    private ShaderInstance? _stampShader;
    private Texture? _stampTexture;
    private float _orientation;

    public float Orientation
    {
        get => _orientation;
        set => _orientation = value;
    }

    public StampDisplayInfo StampInfo
    {
        set
        {
            if (!string.IsNullOrEmpty(value.StampTexture))
            {
                _stampTexture = _resCache.GetResource<TextureResource>(value.StampTexture);
                AddChild(new TextureRect{Texture = _stampTexture});
                StampedByLabel.Visible = false;
            }
            else
            {
                StampedByLabel.Text = Loc.GetString(value.StampedName);
                StampedByLabel.FontColorOverride = value.StampedColor;
                StampedByLabel.Visible = true;
                _stampTexture = null;
            }

            ModulateSelfOverride = value.StampedColor;
        }
    }

    public StampWidget()
    {
        RobustXamlLoader.Load(this);
        _resCache = IoCManager.Resolve<IResourceCache>();

        var borderImage = _resCache.GetResource<TextureResource>(
            "/Textures/Interface/Paper/paper_stamp_border.svg.96dpi.png");

        _borderTexture = new StyleBoxTexture
        {
            Texture = borderImage,
        };
        _borderTexture.SetPatchMargin(StyleBoxTexture.Margin.All, 7.0f);
        PanelOverride = _borderTexture;

        var prototypes = IoCManager.Resolve<IPrototypeManager>();
        _stampShader = prototypes.Index<ShaderPrototype>("PaperStamp").InstanceUnique();
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        _stampShader?.SetParameter("objCoord", GlobalPosition * UIScale * new Vector2(1, -1));
        handle.UseShader(_stampShader);
        handle.SetTransform(GlobalPosition * UIScale, Orientation, Vector2.One);

        if (_stampTexture == null)
        {
            base.Draw(handle);
        }

        handle.SetTransform(Matrix3x2.Identity);
        handle.UseShader(null);
    }
}
