using System.Linq;
using Content.Shared.Administration;
using Content.Shared.Corvax.TTS;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AdminAnnounceWindow : DefaultWindow
    {
        [Dependency] private readonly ILocalizationManager _localization = default!;

        private readonly List<TTSVoicePrototype> _voices; // Corvax-TTS
        public Action<string>? OnVoiceChange; // Corvax-TTS

        public AdminAnnounceWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            Announcement.Placeholder = new Rope.Leaf(_localization.GetString("admin-announce-announcement-placeholder"));
            AnnounceMethod.AddItem(_localization.GetString("admin-announce-type-station"));
            AnnounceMethod.SetItemMetadata(0, AdminAnnounceType.Station);
            AnnounceMethod.AddItem(_localization.GetString("admin-announce-type-server"));
            AnnounceMethod.SetItemMetadata(1, AdminAnnounceType.Server);
            AnnounceMethod.OnItemSelected += AnnounceMethodOnOnItemSelected;
            VoiceSelector.OnItemSelected += AnnounceMethodOnOnTTSItemSelected;
            Announcement.OnKeyBindUp += AnnouncementOnOnTextChanged;

            // Corvax-TTS-Start
            _voices = IoCManager
                .Resolve<IPrototypeManager>()
                .EnumeratePrototypes<TTSVoicePrototype>()
                .OrderBy(o => Loc.GetString(o.Name))
                .ToList();
            for (var i = 0; i < _voices.Count; i++)
            {
                var name = Loc.GetString(_voices[i].Name);
                VoiceSelector.AddItem(name);
                VoiceSelector.SetItemMetadata(i, _voices[i].ID);
            }
            // Corvax-TTS-End
        }

        private void AnnouncementOnOnTextChanged(GUIBoundKeyEventArgs args)
        {
            AnnounceButton.Disabled = Rope.Collapse(Announcement.TextRope).TrimStart() == "";
        }

        private void AnnounceMethodOnOnItemSelected(OptionButton.ItemSelectedEventArgs args)
        {
            AnnounceMethod.SelectId(args.Id);
            Announcer.Editable = ((AdminAnnounceType?)args.Button.SelectedMetadata ?? AdminAnnounceType.Station) == AdminAnnounceType.Station;
        }

        // Corvax-TTS-Start
        private void AnnounceMethodOnOnTTSItemSelected(OptionButton.ItemSelectedEventArgs args)
        {
            VoiceSelector.SelectId(args.Id);
        }
        // Corvax-TTS-End
    }
}
