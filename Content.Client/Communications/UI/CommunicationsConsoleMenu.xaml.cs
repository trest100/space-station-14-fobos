using Content.Client.UserInterface.Controls;
using System.Threading;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Utility;
using Timer = Robust.Shared.Timing.Timer;

namespace Content.Client.Communications.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CommunicationsConsoleMenu : FancyWindow
    {
        private CommunicationsConsoleBoundUserInterface Owner { get; set; }
        private readonly CancellationTokenSource _timerCancelTokenSource = new();

        [Dependency] private readonly IConfigurationManager _cfg = default!;

        public CommunicationsConsoleMenu(CommunicationsConsoleBoundUserInterface owner)
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            Owner = owner;

            var loc = IoCManager.Resolve<ILocalizationManager>();
            MessageInput.Placeholder = new Rope.Leaf(loc.GetString("comms-console-menu-announcement-placeholder"));

            var maxAnnounceLength = _cfg.GetCVar(CCVars.ChatMaxAnnouncementLength);
            MessageInput.OnTextChanged += (args) =>
            {
                if (args.Control.TextLength > maxAnnounceLength)
                {
                    AnnounceButton.Disabled = true;
                    AnnounceButton.ToolTip = Loc.GetString("comms-console-message-too-long");
                }
                else
                {
                    AnnounceButton.Disabled = !owner.CanAnnounce;
                    AnnounceButton.ToolTip = null;

                }
            };

            AnnounceButton.OnPressed += (_) => Owner.AnnounceButtonPressed(Rope.Collapse(MessageInput.TextRope));
            AnnounceButton.Disabled = !owner.CanAnnounce;

            ERTMessageInput.Placeholder = new Rope.Leaf(loc.GetString("comms-console-menu-ert-message-placeholder"));

            BroadcastButton.OnPressed += (_) => Owner.BroadcastButtonPressed(Rope.Collapse(MessageInput.TextRope));
            BroadcastButton.Disabled = !owner.CanBroadcast;

            AlertLevelSelector.OnItemSelected += args =>
            {
                var metadata = AlertLevelSelector.GetItemMetadata(args.Id);
                if (metadata != null && metadata is string cast)
                {
                    Owner.AlertLevelSelected(cast);
                }
            };

            AlertLevelSetButton.OnPressed += (_) => Owner.AlertLevelSetButtonPressed();
            AlertLevelSetButton.Disabled = !owner.CanSetAlertLevel;

            ERTTeamSelector.OnItemSelected += args =>
            {
                var metadata = ERTTeamSelector.GetItemMetadata(args.Id);
                if (metadata != null && metadata is string cast)
                {
                    Owner.ERTTeamSelected(cast);
                }
            };

            ERTCall.OnPressed += (_) => Owner.CallERTButtonPressed(Rope.Collapse(ERTMessageInput.TextRope).Trim());
            ERTCall.Disabled = !owner.ERTCanCall;

            EmergencyShuttleButton.OnPressed += (_) => Owner.EmergencyShuttleButtonPressed();
            EmergencyShuttleButton.Disabled = !owner.CanCall;

            FirstPrivilegedIdButton.OnPressed += _ =>
            {
                Owner.UpdateFirstId();
                UpdateFirstId(owner.IsFirstPrivilegedIdPresent, owner.IsFirstPrivilegedIdValid);
            };

            SecondPrivilegedIdButton.OnPressed += _ =>
            {
                Owner.UpdateSecondId();
                UpdateSecondId(owner.IsSecondPrivilegedIdPresent, owner.IsSecondPrivilegedIdValid);
            };

            UpdateCountdown();
            Timer.SpawnRepeating(1000, UpdateCountdown, _timerCancelTokenSource.Token);
        }

        // The current alert could make levels unselectable, so we need to ensure that the UI reacts properly.
        // If the current alert is unselectable, the only item in the alerts list will be
        // the current alert. Otherwise, it will be the list of alerts, with the selected alert
        // selected.
        public void UpdateAlertLevels(List<string>? alerts, string currentAlert, string selectedAlert)
        {
            AlertLevelSelector.Clear();

            if (alerts == null)
            {
                var name = currentAlert;
                if (Loc.TryGetString($"alert-level-{currentAlert}", out var locName))
                {
                    name = locName;
                }
                AlertLevelSelector.AddItem(name);
                AlertLevelSelector.SetItemMetadata(AlertLevelSelector.ItemCount - 1, currentAlert);
            }
            else
            {
                foreach (var alert in alerts)
                {
                    var name = alert;
                    if (Loc.TryGetString($"alert-level-{alert}", out var locName))
                    {
                        name = locName;
                    }
                    AlertLevelSelector.AddItem(name);
                    AlertLevelSelector.SetItemMetadata(AlertLevelSelector.ItemCount - 1, alert);
                    if (alert == selectedAlert)
                    {
                        AlertLevelSelector.Select(AlertLevelSelector.ItemCount - 1);
                    }
                }
            }
        }

        public void UpdateERTTeams(List<string>? ertTeams, string? selectedErt)
        {
            ERTTeamSelector.Clear();

            if (ertTeams == null)
                return;

            foreach (var team in ertTeams)
            {
                var name = team;
                if (Loc.TryGetString($"ert-team-name-{team}", out var locName))
                {
                    name = locName;
                }
                ERTTeamSelector.AddItem(name);
                ERTTeamSelector.SetItemMetadata(ERTTeamSelector.ItemCount - 1, team);
                if (team == selectedErt)
                {
                    ERTTeamSelector.Select(ERTTeamSelector.ItemCount - 1);
                }
            }
        }

        public void UpdateCountdown()
        {
            if (!Owner.CountdownStarted)
            {
                CountdownLabel.SetMessage("");
                EmergencyShuttleButton.Text = Loc.GetString("comms-console-menu-call-shuttle");
            }
            else
            {
                EmergencyShuttleButton.Text = Loc.GetString("comms-console-menu-recall-shuttle");
                var infoText = Loc.GetString($"comms-console-menu-time-remaining",
                ("time", Owner.Countdown.ToString()));
                CountdownLabel.SetMessage(infoText);
            }

            if (!Owner.ERTCountdownStarted)
            {
                ERTCountdownLabel.SetMessage("");
                ERTCall.Text = Loc.GetString("comms-console-menu-call-ert");
                ERTCallStatusLabel.Text = "";
            }
            else
            {
                ERTCall.Text = Loc.GetString("comms-console-menu-recall-ert");
                var ERTinfoText = Loc.GetString($"comms-console-menu-time-remaining",
                ("time", Owner.Countdown.ToString()));
                ERTCountdownLabel.SetMessage(ERTinfoText);
                ERTCallStatusLabel.Text = Loc.GetString("comms-console-menu-call-ert-status-called");
            }
        }

        public void UpdateFirstId(bool isFirstPrivilegedIdPresent, bool isFirstPrivilegedIdValid)
        {
            FirstPrivilegedIdButton.Text = isFirstPrivilegedIdPresent ? Loc.GetString("comms-console-menu-eject-button") : Loc.GetString("comms-console-menu-insert-button");

            if (isFirstPrivilegedIdValid)
                FirstPrivilegedIdLabel.FontColorOverride = Color.DarkGreen;
            else
                FirstPrivilegedIdLabel.FontColorOverride = Color.LightGray;

            ERTCall.Disabled = !Owner.ERTCanCall;
        }

        public void UpdateSecondId(bool isSecondPrivilegedIdPresent, bool isSecondPrivilegedIdValid)
        {
            SecondPrivilegedIdButton.Text = isSecondPrivilegedIdPresent ? Loc.GetString("comms-console-menu-eject-button") : Loc.GetString("comms-console-menu-insert-button");

            if (isSecondPrivilegedIdValid)
                SecondPrivilegedIdLabel.FontColorOverride = Color.DarkGreen;
            else
                SecondPrivilegedIdLabel.FontColorOverride = Color.LightGray;

            ERTCall.Disabled = !Owner.ERTCanCall;
        }

        public override void Close()
        {
            base.Close();

            _timerCancelTokenSource.Cancel();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
                _timerCancelTokenSource.Cancel();
        }
    }
}
