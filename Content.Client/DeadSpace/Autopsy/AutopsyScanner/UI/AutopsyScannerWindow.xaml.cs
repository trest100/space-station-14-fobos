// Мёртвый Космос, Licensed under custom terms with restrictions on public hosting and commercial use, full text: https://raw.githubusercontent.com/dead-space-server/space-station-14-fobos/master/LICENSE.TXT

using System.Linq;
using Content.Shared.Damage;
using Content.Shared.Damage.Prototypes;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Content.Shared.DeadSpace.Autopsy;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;

namespace Content.Client.DeadSpace.Autopsy.AutopsyScanner.UI;

[GenerateTypedNameReferences]
public sealed partial class AutopsyScannerWindow : DefaultWindow
{
    private readonly IEntityManager _entityManager;
    private readonly IPrototypeManager _prototypes;
    private readonly IGameTiming _gameTiming;

    private const int AnalyzerHeight = 515;
    private const int AnalyzerWidth = 340;

    public AutopsyScannerWindow()
    {
        RobustXamlLoader.Load(this);

        var dependencies = IoCManager.Instance!;
        _entityManager = dependencies.Resolve<IEntityManager>();
        _prototypes = dependencies.Resolve<IPrototypeManager>();
        _gameTiming = dependencies.Resolve<IGameTiming>();
    }

    public void Populate(AutopsyScannerScannedUserMessage msg)
    {
        GroupsContainer.RemoveAllChildren();

        var target = _entityManager.GetEntity(msg.TargetEntity);

        if (target == null
            || !_entityManager.TryGetComponent<DamageableComponent>(target, out var damageable))
        {
            NoPatientDataText.Visible = true;
            return;
        }

        if (!_entityManager.TryGetComponent<HumanoidDamageSequenceComponent>(target, out var damageSequence))
            return;

        NoPatientDataText.Visible = false;

        string entityName = Loc.GetString("autopsy-scanner-window-entity-unknown-text");
        if (_entityManager.HasComponent<MetaDataComponent>(target.Value))
        {
            entityName = Identity.Name(target.Value, _entityManager);
        }

        PatientName.Text = Loc.GetString(
            "autopsy-scanner-window-entity-health-text",
            ("entityName", entityName)
        );

        TimeOfDeath.Text = Loc.GetString("autopsy-scanner-window-entity-blood-level-text",
            ("timeOfDeath", msg.TimeOfDeath == null ? Loc.GetString("autopsy-scanner-window-entity-unknown-text") : $"{_gameTiming.CurTime - msg.TimeOfDeath:m\\:ss}")
        );

        patientDamageAmount.Text = Loc.GetString(
            "autopsy-scanner-window-entity-damage-total-text",
            ("amount", damageable.TotalDamage)
        );

        var damageSortedGroups =
            damageable.DamagePerGroup.OrderBy(damage => damage.Value)
                .ToDictionary(x => x.Key, x => x.Value);

        DrawDiagnosticGroups(damageSortedGroups, damageSequence.DamageSequence.Reverse());

        SetHeight = AnalyzerHeight;
        SetWidth = AnalyzerWidth;
    }

    private void DrawDiagnosticGroups(Dictionary<string, FixedPoint2> groups, IEnumerable<DamageEntry> damageSequence)
    {
        // Show the total damage and type breakdown for each damage group.
        foreach (var (damageGroupId, damageAmount) in groups.Reverse())
        {
            if (damageAmount == 0)
                continue;

            var groupTitleText = $"{Loc.GetString(
                "autopsy-scanner-window-damage-group-text",
                ("damageGroup", Loc.GetString("autopsy-scanner-window-damage-group-" + damageGroupId)),
                ("amount", damageAmount)
            )}";

            var groupContainer = new BoxContainer
            {
                Margin = new Thickness(0, 0, 0, 15),
                Align = BoxContainer.AlignMode.Begin,
                Orientation = BoxContainer.LayoutOrientation.Vertical,
            };

            groupContainer.AddChild(CreateDiagnosticGroupTitle(groupTitleText, damageGroupId, damageAmount.Int()));

            GroupsContainer.AddChild(groupContainer);

            // Show the damage for each type in that group.
            var group = _prototypes.Index<DamageGroupPrototype>(damageGroupId);

            if (damageGroupId == "Toxin" || damageGroupId == "Genetic" || damageGroupId == "Airloss")
                continue;

            foreach (var damage in damageSequence)
            {
                foreach (var type in group.DamageTypes)
                {
                    if (damage.DamageType == type)
                    {
                        var damageString = Loc.GetString(
                            "autopsy-scanner-window-damage-type-text",
                            ("damageType", Loc.GetString("autopsy-scanner-window-damage-type-" + damage.DamageType)),
                            ("amount", damage.DamageTaken),
                            ("timePassed", $"{_gameTiming.CurTime - damage.TimeOfDamageTake:m\\:ss}")
                        );

                        groupContainer.AddChild(CreateDiagnosticItemLabel(damageString));
                    }
                }
            }
        }
    }

    private static Label CreateDiagnosticItemLabel(string text)
    {
        return new Label
        {
            Margin = new Thickness(2, 2),
            Text = text,
        };
    }

    private BoxContainer CreateDiagnosticGroupTitle(string text, string id, int damageAmount)
    {
        var rootContainer = new BoxContainer
        {
            VerticalAlignment = VAlignment.Bottom,
            Orientation = BoxContainer.LayoutOrientation.Horizontal
        };

        rootContainer.AddChild(CreateDiagnosticItemLabel(text));

        return rootContainer;
    }
}
