using Content.Client.Pinpointer.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Client.UserInterface.Controls;
using Robust.Client.GameObjects;
using Robust.Shared.Utility;
using Content.Shared.DeadSpace.StationAi;

namespace Content.Client.DeadSpace.StationAI.UI;

[GenerateTypedNameReferences]
public sealed partial class AICameraList : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    public event Action<NetEntity>? WarpToCamera;

    private readonly EntityUid _owner;

    public AICameraList(EntityUid? mapUid, EntityUid? trackedEntity)
    {
        _owner = trackedEntity ?? EntityUid.Invalid;
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        NavMapScreen.MapUid = mapUid;
        NavMapScreen.TrackedEntitySelectedAction += ItemSelected;

        UpdateCameras();
    }

    public void UpdateCameras()
    {
        if (!_entityManager.TryGetComponent<AiEyeComponent>(_owner, out var eyeComponent))
            return;

        NavMapScreen.TrackedEntities.Clear();

        foreach (var (camera, pos) in eyeComponent.Cameras)
        {
            if (pos.X == 0 && pos.Y == 0)
                continue;

            var texture = _entityManager.System<SpriteSystem>().Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));
            var blip = new NavMapBlip(_entityManager.GetCoordinates(pos), texture, Color.Cyan, false, true);
            NavMapScreen.TrackedEntities[camera] = blip;
        }

        NavMapScreen.ForceNavMapUpdate();
    }

    private void ItemSelected(NetEntity? obj)
    {
        if (obj != null)
            WarpToCamera?.Invoke(obj.Value);
    }
}
